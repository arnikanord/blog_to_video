{
  "name": "Video Wan2.1 blog to video HF Free",
  "nodes": [
    {
      "parameters": {
        "path": "8850798e-135e-47ae-89b6-f5b0d58fa3f9",
        "formTitle": "WebP to Video Generator",
        "formDescription": "Transform any webpage's WebP images into an AI-generated video with background music",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Website URL",
              "requiredField": true
            },
            {
              "fieldLabel": "Music",
              "fieldType": "file",
              "acceptFileTypes": "mp3",
              "requiredField": true
            },
            {
              "fieldLabel": "Additional Context (Optional)",
              "fieldType": "textarea",
              "placeholder": "any additional info"
            },
            {
              "fieldLabel": "Status",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "public"
                  },
                  {
                    "option": "unlisted"
                  },
                  {
                    "option": "private"
                  }
                ]
              },
              "requiredField": true
            },
            {
              "fieldLabel": "Model",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Kore"
                  },
                  {
                    "option": "Leda"
                  },
                  {
                    "option": "Aoede"
                  }
                ]
              },
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "id": "f7b23366-f10c-40e7-a602-4140cbc6a10b",
      "name": "Form Trigger",
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.1,
      "position": [
        -1328,
        -608
      ],
      "webhookId": "8850798e-135e-47ae-89b6-f5b0d58fa3f9"
    },
    {
      "parameters": {
        "content": "## üé¨ WebP to Video Generator Workflow\n\n**Purpose**: Automatically converts WebP images from any webpage into AI-generated videos with background music\n\n**Input**: Website URL containing WebP images\n**Output**: Compiled video with animations and music\n\n**Key Features**:\n- Smart content scraping with Jina AI\n- AI-powered video generation via Kling\n- Contextual music selection\n- Automated video assembly",
        "height": 340,
        "width": 600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2080,
        992
      ],
      "id": "74bbfdc9-a2e1-44c1-a766-fcd2f3a8de43",
      "name": "Workflow Overview"
    },
    {
      "parameters": {
        "url": "=https://r.jina.ai/{{ $('Form Trigger').item.json['Website URL'] }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -800,
        -608
      ],
      "id": "9be777e6-2a8b-48e3-8381-e9781330fbbd",
      "name": "Scrape with Jina AI",
      "credentials": {
        "httpHeaderAuth": {
          "id": "z7kfVFssxCXF7SYA",
          "name": "Jina"
        }
      }
    },
    {
      "parameters": {
        "content": "## üîç Content Extraction\n\nUses Jina AI to:\n- Extract clean text content\n- Find WebP image URLs\n- Get image descriptions\n- Understand page context\n\nJina provides structured, readable content instead of raw HTML",
        "height": 280,
        "width": 420,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1440,
        960
      ],
      "id": "ba495e34-803b-4413-b11a-70c94119b67b",
      "name": "Content Extraction Note"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "webp-extract",
              "name": "webpImages",
              "value": "={{ $json.data.match(/https?:\\/\\/[^\\s\"']+\\.webp/gi) || [] }}",
              "type": "array"
            },
            {
              "id": "image-descriptions",
              "name": "imageDescriptions",
              "value": "={{ $json.data.match(/!\\[Image \\d+: ([^\\]]+)\\]/gi) || [] }}",
              "type": "array"
            },
            {
              "id": "original-url",
              "name": "originalUrl",
              "value": "={{ $('Form Trigger').item.json['Website URL'] }}",
              "type": "string"
            },
            {
              "id": "content-context",
              "name": "contentContext",
              "value": "={{ $json.data.substring(0, 500) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -528,
        -608
      ],
      "id": "542867f3-2bf8-40fc-a45a-96b018eda131",
      "name": "Extract Data from Jina"
    },
    {
      "parameters": {
        "fieldToSplitOut": "webpImages",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        0,
        -608
      ],
      "id": "340aaded-6212-453e-82ff-bc85beca0cc4",
      "name": "Split Images"
    },
    {
      "parameters": {
        "content": "## üé® Scene Preparation\n\nFor each WebP image:\n- Extracts image URL\n- Gets image description from Jina\n- Creates contextual animation prompt\n- Assigns scene number\n\nAnimation prompts adapt based on content (dogs, landscapes, etc.)",
        "height": 280,
        "width": 420,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1520,
        384
      ],
      "id": "a82f2348-902b-4da0-a26b-73a9070f8dbf",
      "name": "Scene Preparation Note"
    },
    {
      "parameters": {
        "content": "## üé¨ Video Generation\n\nUses Hugging Face Wan 2.1 to:\n- Convert static WebP images to videos\n- Apply contextual animations\n- Generate 9:16 aspect ratio videos\n- Handle async processing with polling\n\nEach image becomes a 5-second video clip",
        "height": 300,
        "width": 420,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2112,
        -336
      ],
      "id": "a2ed9f55-e0d7-4f27-9032-a3290304b92b",
      "name": "Video Generation Note"
    },
    {
      "parameters": {
        "content": "## üìã Setup Checklist\n\n**Required Credentials:**\n- Jina AI (included)\n- Fal.ai (Kling video generation)\n- OpenRouter (music selection AI)\n- Supabase (database & storage)\n- Json2Video (final rendering)\n\n**Supabase Setup:**\n- Table: 'ShortsMusic' with fields: id, description, musicurl\n- Bucket: 'content-automation/videos/'\n\n**Form Access:**\nOnce activated, access the form at:\n`https://your-n8n-instance.com/form/webp-to-video-form`",
        "height": 400,
        "width": 500,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1376,
        -688
      ],
      "id": "33329558-87d8-4a81-a5c5-b8d32a1a791a",
      "name": "Setup Checklist"
    },
    {
      "parameters": {
        "url": "={{ $json.webpImages }}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        256,
        -608
      ],
      "id": "0ca640cb-d58a-4696-9323-895c8d6d35fa",
      "name": "Get Images"
    },
    {
      "parameters": {
        "url": "={{ $json.downloadUrl }}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1376,
        1216
      ],
      "id": "1eac7d42-cda2-49fe-b943-23859f771a1d",
      "name": "Download Generated Video"
    },
    {
      "parameters": {
        "amount": "=60"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1184,
        -144
      ],
      "id": "fbffb725-e890-4bc1-b591-808171f88f7e",
      "name": "Wait for Processing",
      "webhookId": "704fa086-d5d5-4436-80f2-abe1bf3c3564"
    },
    {
      "parameters": {
        "url": "=https://alexl1973-wan2-1-fast-n8n.hf.space/gradio_api/call/generate_video/{{ $('WAN 2.1 - Fixed Format').item.json.event_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1472,
        -144
      ],
      "id": "8d2357be-92c6-4605-aa84-e1dd268b97c4",
      "name": "Get Video Result",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Yok8CNYAwTpGdenI",
          "name": "HuggignFace-VideoGenn8n"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://alexl1973-wan2-1-fast-n8n.hf.space/gradio_api/call/generate_video",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"data\": [\n    {\n      \"path\": \"{{ $('Merge').item.json.imageUrl }}\",\n      \"meta\": {\n        \"_type\": \"gradio.FileData\"\n      }\n    },\n    \"{{ $json.text }}\",\n    768,\n    432,\n    \"Bright tones, overexposed, static, blurred details, subtitles, style, works, paintings, images, static, overall gray, worst quality, low quality, ugly, incomplete, extra fingers, poorly drawn hands, poorly drawn faces, deformed, disfigured, misshapen limbs, fused fingers, still picture, messy background, three legs, many people in the background, walking backwards, watermark, text, signature\",\n    5,\n    1,\n    4,\n    -1,\n    true\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        816,
        -144
      ],
      "id": "c212bd7e-33b2-425c-8a62-1610a952031d",
      "name": "WAN 2.1 - Fixed Format",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Yok8CNYAwTpGdenI",
          "name": "HuggignFace-VideoGenn8n"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cloudinary.com/v1_1/dbcbt9uxh/image/upload",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "upload_preset",
              "value": "n8n_unsigned"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "1652fd3c-753f-45e5-b7d7-de08e8b508e1",
      "name": "Upload images to Cloudinary",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -816,
        -176
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "08b59024-bd1d-4264-87db-badc15bf217b",
              "name": "imageUrl",
              "value": "={{ $json.secure_url.replace('.webp', '.png') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -224,
        -176
      ],
      "id": "820d597d-728d-4ad4-b3ed-cf5c8ecee7ee",
      "name": "Prepare Video Data"
    },
    {
      "parameters": {
        "jsCode": "// Get the single item coming from the 'Extract Data from Jina' node.\nconst item = $input.item;\n\n// Get the array of image URLs from the 'webpImages' property.\nconst allImages = item.json.webpImages;\n\n// This is the minimum height we want to allow.\nconst minHeight = 683;\n\n// Function to get actual image dimensions\nasync function getImageDimensions(url) {\n  try {\n    // Download just enough of the image to read its headers\n    const response = await fetch(url, {\n      headers: {\n        'Range': 'bytes=0-2048' // Get first 2KB which contains image metadata\n      }\n    });\n    \n    if (!response.ok) {\n      console.log(`Failed to fetch ${url}: ${response.status}`);\n      return null;\n    }\n    \n    const buffer = await response.arrayBuffer();\n    const bytes = new Uint8Array(buffer);\n    \n    // Parse WebP dimensions from binary data\n    // WebP signature starts with \"RIFF\" then \"WEBP\"\n    if (bytes.length >= 30) {\n      // Look for VP8 or VP8L chunks which contain dimensions\n      for (let i = 12; i < bytes.length - 10; i++) {\n        // VP8 chunk\n        if (bytes[i] === 0x56 && bytes[i+1] === 0x50 && bytes[i+2] === 0x38 && bytes[i+3] === 0x20) {\n          const width = bytes[i+14] | (bytes[i+15] << 8);\n          const height = bytes[i+16] | (bytes[i+17] << 8);\n          return { width, height };\n        }\n        // VP8L chunk  \n        if (bytes[i] === 0x56 && bytes[i+1] === 0x50 && bytes[i+2] === 0x38 && bytes[i+3] === 0x4C) {\n          const data = bytes[i+9] | (bytes[i+10] << 8) | (bytes[i+11] << 16) | (bytes[i+12] << 24);\n          const width = (data & 0x3FFF) + 1;\n          const height = ((data >> 14) & 0x3FFF) + 1;\n          return { width, height };\n        }\n      }\n    }\n    \n    return null;\n  } catch (error) {\n    console.log(`Error checking dimensions for ${url}:`, error);\n    return null;\n  }\n}\n\n// Filter images by actual dimensions\nconst validImages = [];\n\nfor (const url of allImages) {\n  console.log(`Checking dimensions for: ${url}`);\n  \n  const dimensions = await getImageDimensions(url);\n  \n  if (dimensions) {\n    console.log(`${url}: ${dimensions.width}x${dimensions.height}`);\n    \n    if (dimensions.height >= minHeight) {\n      validImages.push(url);\n      console.log(`‚úì Included (height ${dimensions.height} >= ${minHeight})`);\n    } else {\n      console.log(`‚úó Excluded (height ${dimensions.height} < ${minHeight})`);\n    }\n  } else {\n    // If we can't determine dimensions, include it to be safe\n    validImages.push(url);\n    console.log(`? Included (couldn't determine dimensions)`);\n  }\n}\n\nconsole.log(`Filtered from ${allImages.length} to ${validImages.length} images`);\n\n// Replace the old array of images with our new, filtered array.\nitem.json.webpImages = validImages;\n\n// Return the modified item.\nreturn item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        -608
      ],
      "id": "8a79653f-2f94-4e8e-820a-4ab3968af5ea",
      "name": "Code"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        368,
        -144
      ],
      "id": "e32b206d-13bc-450e-b211-392e682b9cf6",
      "name": "Merge"
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.0-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.0-flash"
        },
        "text": "Describe this image ",
        "inputType": "binary",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        -1584,
        112
      ],
      "id": "dd40a619-b94a-470b-b60b-21223beb2cbe",
      "name": "Analyze image",
      "retryOnFail": true,
      "credentials": {
        "googlePalmApi": {
          "id": "7iF8ELIS3KqeTYTj",
          "name": "Google Gemini Arnika API"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a creative assistant for a video animation engine. Your task is to take a description of a static image and create a short, imperative prompt that describes subtle motion for a 3-second video. The animation should be gentle and realistic. Focus on elements that would naturally have movement.\n\nImage Description:\n{{ $json.content.parts[0].text }}",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -576,
        16
      ],
      "id": "38211272-481b-47b1-9cb7-b78e8931a1d6",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -720,
        176
      ],
      "id": "4ee60b49-61bd-4232-ab9a-a9bbedcd4dcc",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "qfKwpRyD2GOzzjcB",
          "name": "OpenRouter Arnika"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Get the current item\nconst item = $input.item;\n\n// Use workflow execution ID to ensure all items use the same directory\nconst workflowExecId = $execution.id || Date.now();\nconst batchId = `video_batch_${workflowExecId}`;\nconst tempDir = `/tmp/video_batch_temp`;\n\n// For this single item, create the video file info  \nconst filename = `video_${String($itemIndex + 1).padStart(3, '0')}.mp4`;\nconst localPath = `${tempDir}/${filename}`;\n\nreturn {\n  json: {\n    downloadUrl: item.json.downloadUrl,\n    localPath: localPath,\n    filename: filename,\n    index: $itemIndex + 1,\n    batchId: batchId,\n    tempDir: tempDir,\n    totalVideos: $items().length\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1024,
        880
      ],
      "id": "3e674d84-efb4-489b-8c98-047207b9155e",
      "name": "Prepare Merge Data"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $('Prepare Merge Data').item.json.localPath }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -80,
        1008
      ],
      "id": "36527a2c-fb09-4153-a6ee-8e4ebc8ff654",
      "name": "Save Video Locally"
    },
    {
      "parameters": {
        "jsCode": "// Get data from the first item (contains our batch info)\nconst firstItem = $items()[0];\nconst { tempDir, batchId, totalVideos } = firstItem.json;\n\n// Configuration for transitions\nconst transitionDuration = 0.5;\nconst clipDuration = 3.38;\nconst effectiveClipDuration = clipDuration - transitionDuration;\nconst totalVideoDuration = (totalVideos * effectiveClipDuration) + transitionDuration;\n\n// Build complex FFmpeg filter for smooth transitions\nlet filterComplex = '';\nlet inputs = '';\nlet videoMaps = [];\n\n// Generate input parameters (videos)\nfor (let i = 0; i < totalVideos; i++) {\n  inputs += `-i ${tempDir}/video_${String(i + 1).padStart(3, '0')}.mp4 `;\n}\n\n// Add audio inputs\ninputs += `-i ${tempDir}/background_music.mp3 `;  // Background music\ninputs += `-i ${tempDir}/voiceover.mp3 `;         // Voiceover\nconst musicIndex = totalVideos;\nconst voiceoverIndex = totalVideos + 1;\n\n// Build filter_complex for crossfade transitions and audio mixing\nif (totalVideos === 1) {\n  // Single video with mixed audio\n  filterComplex = `[0:v]scale=1080:1920:force_original_aspect_ratio=increase,crop=1080:1920,setpts=PTS-STARTPTS[vfinal];` +\n                 `[${musicIndex}:a]atrim=0:${totalVideoDuration},asetpts=PTS-STARTPTS,volume=0.2[music];` +\n                 `[${voiceoverIndex}:a]atrim=0:${totalVideoDuration},asetpts=PTS-STARTPTS,volume=0.8[voice];` +\n                 `[music][voice]amix=inputs=2:duration=longest:dropout_transition=2[afinal]`;\n  \n  videoMaps = ['[vfinal]', '[afinal]'];\n} else {\n  // Multiple videos - create crossfade chain\n  let videoChain = '';\n  \n  // Scale and process all input videos\n  for (let i = 0; i < totalVideos; i++) {\n    videoChain += `[${i}:v]scale=1080:1920:force_original_aspect_ratio=increase,crop=1080:1920,setpts=PTS-STARTPTS[v${i}];`;\n  }\n  \n  // Create crossfade transitions\n  let transitionChain = '';\n  let currentOutput = 'v0';\n  \n  for (let i = 1; i < totalVideos; i++) {\n    const nextOutput = i === totalVideos - 1 ? 'vfinal' : `vtrans${i}`;\n    const offset = (effectiveClipDuration * i);\n    \n    const semicolon = i === totalVideos - 1 ? '' : ';';\n    transitionChain += `[${currentOutput}][v${i}]xfade=transition=fade:duration=${transitionDuration}:offset=${offset}[${nextOutput}]${semicolon}`;\n    currentOutput = nextOutput;\n  }\n  \n  // Add audio mixing (background music + voiceover)\n  const audioChain = `;[${musicIndex}:a]atrim=0:${totalVideoDuration},asetpts=PTS-STARTPTS,volume=0.2[music];` +\n                    `[${voiceoverIndex}:a]atrim=0:${totalVideoDuration},asetpts=PTS-STARTPTS,volume=0.8[voice];` +\n                    `[music][voice]amix=inputs=2:duration=longest:dropout_transition=2[afinal]`;\n  \n  // Combine all filters\n  filterComplex = videoChain.slice(0, -1) + ';' + transitionChain + audioChain;\n  videoMaps = ['[vfinal]', '[afinal]'];\n}\n\nconst outputPath = `${tempDir}/final_video_with_transitions.mp4`;\n\n// Build complete FFmpeg command with mixed audio\nconst ffmpegCommand = `ffmpeg -y ${inputs.trim()} -filter_complex \"${filterComplex}\" -map \"${videoMaps[0]}\" -map \"${videoMaps[1]}\" -c:v libx264 -preset medium -crf 23 -c:a aac -b:a 128k -movflags +faststart ${outputPath}`;\n\nreturn [{\n  json: {\n    batchId: batchId,\n    tempDir: tempDir,\n    outputPath: outputPath,\n    totalVideos: totalVideos,\n    ffmpegCommand: ffmpegCommand,\n    transitionDuration: transitionDuration,\n    totalDuration: totalVideoDuration\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        992
      ],
      "id": "4f882d64-9316-4771-99b8-315f1a52460e",
      "name": "Create Transition Command"
    },
    {
      "parameters": {
        "command": "={{ $json.ffmpegCommand }}"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1936,
        896
      ],
      "id": "a39702c3-0748-4857-a301-c04de8c1e915",
      "name": "Merge Videos with Transitions",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "fileSelector": "={{ $('Create Transition Command').item.json.outputPath }}",
        "options": {
          "dataPropertyName": "data"
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1968,
        1152
      ],
      "id": "174d8576-d72a-4956-ba9c-23acbbadb68a",
      "name": "Read Final Video",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cloudinary.com/v1_1/dbcbt9uxh/video/upload",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "upload_preset",
              "value": "n8n_unsigned"
            },
            {
              "name": "resource_type",
              "value": "video"
            },
            {
              "name": "quality",
              "value": "auto:good"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -608,
        1424
      ],
      "id": "78b5d24c-05b4-467d-909e-0667d5f81e1a",
      "name": "Upload Final Video"
    },
    {
      "parameters": {
        "command": "=rm -rf {{ $('Create Transition Command').item.json.tempDir }}"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        896,
        1424
      ],
      "id": "78d81e6e-d274-4824-be3a-8789e50e198d",
      "name": "Cleanup Temp Files"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "final-video-url",
              "name": "finalVideoUrl",
              "value": "={{ $('Upload Final Video').item.json.secure_url }}",
              "type": "string"
            },
            {
              "id": "video-duration",
              "name": "videoDuration",
              "value": "={{ $('Upload Final Video').item.json.duration }}",
              "type": "number"
            },
            {
              "id": "video-size",
              "name": "videoSize",
              "value": "={{ $('Upload Final Video').item.json.bytes }}",
              "type": "number"
            },
            {
              "id": "video-format",
              "name": "videoFormat",
              "value": "{{ $('Upload Final Video').item.json.format }}",
              "type": "string"
            },
            {
              "id": "processing-summary",
              "name": "processingSummary",
              "value": "=Video created with {{ $('Create Transition Command').item.json.totalVideos }} clips and {{ $('Create Transition Command').item.json.transitionDuration }}s smooth transitions",
              "type": "string"
            },
            {
              "id": "563c2f15-3a9b-4f16-803c-fe732da8a55d",
              "name": "youtubeUrl",
              "value": "=https://youtube.com/watch?v={{ $('Upload to YouTube').first().json.uploadId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1136,
        1424
      ],
      "id": "85005ff0-bf8f-4d55-9afb-da2b68b2019c",
      "name": "Prepare Final Output"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -320,
        1008
      ],
      "id": "9046162f-688a-4490-aabc-fd6df2691ab5",
      "name": "Merge tmp video"
    },
    {
      "parameters": {
        "command": "=mkdir -p /tmp/video_batch_temp || true"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -1056,
        1056
      ],
      "id": "873724cb-38ac-4704-85f2-d6dd74031f04",
      "name": "Create Temp Directory"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -768,
        912
      ],
      "id": "44fda49e-26f7-4455-9589-0008a04ab4b9",
      "name": "Merge1"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "/tmp/video_batch_temp/background_music.mp3",
        "dataPropertyName": "/tmp/video_batch_temp/background_music.mp3",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        2112,
        736
      ],
      "id": "b11187e7-0b57-4227-9df4-4a23901b46ef",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "url": "={{ $('Upload Music to Cloudinary').first().json.secure_url }}\n",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "file",
              "outputPropertyName": "/tmp/video_batch_temp/background_music.mp3"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        800,
        896
      ],
      "id": "8bc33426-e72e-496c-b213-43b81863a6c6",
      "name": "Download Music from Cloudinary"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cloudinary.com/v1_1/dbcbt9uxh/raw/upload",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "upload_preset",
              "value": "n8n_unsigned"
            },
            {
              "name": "resource_type",
              "value": "video"
            },
            {
              "name": "public_id",
              "value": "={{ $json.Music[0].filename }}"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "Music"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "Music"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1088,
        -608
      ],
      "id": "ee7e16ac-80ad-45ba-b58a-0bd81b321516",
      "name": "Upload Music to Cloudinary"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "id": "41aa574e-072f-4377-8800-3aa188bef727",
      "name": "OpenAI GPT-4o Mini",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -400,
        1648
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "ZO2tK0Pn8f7HxWD3",
          "name": "OpenAi aluton1"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a YouTube content optimization expert. Based on the provided article content, generate an engaging title and description for a YouTube video.\n\n**Article URL:** {{ $('Form Trigger').first().json['Website URL'] }}\n**Article Content:** {{ $('Scrape with Jina AI').first().json.data }}\n**Additional Context:** {{ $('Form Trigger').first().json['Additional Context (Optional)'] || 'None provided' }}\n\n**Requirements:**\n- Title: 60 characters or less, engaging and SEO-optimized\n- Description: 200-500 words, include key points from the article\n- Format your response as JSON with \"title\" and \"description\" fields\n- Make the content YouTube-friendly and engaging\n- Include relevant keywords for better discoverability\n\nGenerate content that will attract viewers and accurately represent the video based on the article.",
        "options": {}
      },
      "id": "0eb3a370-6372-4906-9689-d915bbac2757",
      "name": "Generate Title & Description",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -384,
        1424
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "jsCode": "// Parse the AI response to extract title and description\nconst aiResponse = $input.first().json.output;\n\n// Try to parse as JSON first\nlet parsedContent;\ntry {\n  parsedContent = JSON.parse(aiResponse);\n} catch (e) {\n  // If not JSON, try to extract title and description from text\n  const titleMatch = aiResponse.match(/\"title\"\\s*:\\s*\"([^\"]+)\"/i) || aiResponse.match(/title\\s*:\\s*([^\\n]+)/i);\n  const descMatch = aiResponse.match(/\"description\"\\s*:\\s*\"([^\"]+)\"/i) || aiResponse.match(/description\\s*:\\s*([^\\n]+)/i);\n  \n  parsedContent = {\n    title: titleMatch ? titleMatch[1].trim() : \"Schw√§bische Alb Nature Journey\",\n    description: descMatch ? descMatch[1].trim() : \"AI-generated nature video from the Schw√§bische Alb region\"\n  };\n}\n\n// Get the original form data and video info\nconst formData = $('Form Trigger').first().json;\nconst videoInfo = $('Upload Final Video').first().json;\n\n// Combine everything\nreturn [{\n  json: {\n    title: parsedContent.title,\n    description: parsedContent.description,\n    websiteUrl: formData['Website URL'],\n    additionalContext: formData['Additional Context (Optional)'] || '',\n    videoUrl: videoInfo.secure_url\n  },\n  binary: $('Upload Final Video').first().binary\n}];"
      },
      "id": "e75b3b96-f0f0-489c-b2e0-6538503ce774",
      "name": "Prepare Upload Data",
      "type": "n8n-nodes-base.code",
      "position": [
        -16,
        1424
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "resource": "video",
        "operation": "upload",
        "title": "={{ $json.title }}",
        "regionCode": "DE",
        "categoryId": "22",
        "options": {
          "description": "={{ $json.description }}",
          "privacyStatus": "={{ $('Form Trigger').first().json.Status }}",
          "selfDeclaredMadeForKids": false,
          "tags": "={{ $json.title }}"
        }
      },
      "id": "6022031a-fcec-459b-8f3e-fe5043d3ba4a",
      "name": "Upload to YouTube",
      "type": "n8n-nodes-base.youTube",
      "position": [
        640,
        1424
      ],
      "typeVersion": 1,
      "credentials": {
        "youTubeOAuth2Api": {
          "id": "NsAQ32oSGkVA3s4a",
          "name": "YouTube Arnika FeHund"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.videoUrl }}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        1424
      ],
      "id": "07aa80f1-5c76-42a7-8756-5c91bf462751",
      "name": "Get final video"
    },
    {
      "parameters": {
        "operation": "information"
      },
      "type": "n8n-nodes-base.editImage",
      "typeVersion": 1,
      "position": [
        464,
        -784
      ],
      "id": "0574a418-a16d-4e9b-b6b3-b4898a09fbf5",
      "name": "Get Image info"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "01ff353e-0e06-4d84-8213-b1ac7120b0ca",
              "name": "originalWidth",
              "value": "={{ $json.size.width }}",
              "type": "string"
            },
            {
              "id": "430ed6a1-b765-4117-92b3-b4b191d8a4a3",
              "name": "originalHeight",
              "value": "={{ $json.size.height }}",
              "type": "string"
            },
            {
              "id": "fe9a1100-97f9-4d9e-9e7c-d997d86b23d2",
              "name": "cropHeight",
              "value": "={{ $json.size.height }}",
              "type": "string"
            },
            {
              "id": "d724d9bb-70c2-4add-acdf-6184d217823c",
              "name": "cropWidth",
              "value": "={{ Math.round($json.size.height * (9 / 16)) }}",
              "type": "string"
            },
            {
              "id": "6c08a681-4c48-432c-96ac-0eeea581dfe1",
              "name": "cropX",
              "value": "={{ Math.round(($json.size.width - ($json.size.height * 9/16)) / 2) }}",
              "type": "string"
            },
            {
              "id": "29ce22dd-4fb4-4076-8d3d-4c14edc94d3a",
              "name": "cropY",
              "value": "0",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        656,
        -784
      ],
      "id": "79051b75-b2c0-4b4e-b2b9-7273992633c8",
      "name": "Set crop dimensions"
    },
    {
      "parameters": {
        "operation": "crop",
        "width": "={{ $json.cropWidth }}",
        "height": "={{ $json.cropHeight }}",
        "positionX": "={{ $json.cropX }}",
        "positionY": "={{ $json.cropY }}",
        "options": {}
      },
      "type": "n8n-nodes-base.editImage",
      "typeVersion": 1,
      "position": [
        1024,
        -576
      ],
      "id": "07424ec2-bb90-4f33-a2d9-d2e600cb553a",
      "name": "Crop images"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        816,
        -624
      ],
      "id": "03052a99-2331-43b1-9e44-96ecfed8ed79",
      "name": "Merge Binary with data"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -768,
        528
      ],
      "id": "2c783b41-8c6f-4cfb-b2e2-98155dac08a0",
      "name": "OpenRouter Chat Model2",
      "credentials": {
        "openRouterApi": {
          "id": "qfKwpRyD2GOzzjcB",
          "name": "OpenRouter Arnika"
        }
      }
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "content.parts[0].text"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -912,
        288
      ],
      "id": "32770bc3-6553-4689-8f10-9fa2b2216bca",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are creative assitent, blogger an youtuber. You are provided with the article content: {{ $('Scrape with Jina AI').first().json.data }} and images descriptions: {{ $json.text }}, in total {{ $('Summarize').item.json.count_content }} images. \n\nYour task is to create voice over text for the video created from the images. \nTotal video length is {{ 3 * $('Summarize').item.json.count_content }} seconds so voice over MUST be {{ 6 * $('Summarize').item.json.count_content }} words with 6 percent tolerance. Make it interesting and add some mild humor.\n\nYour output must be in clean text, without any emojis or brackets, but with punctuations, it goes directly in text to speech generation model. ",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -704,
        336
      ],
      "id": "bd6fcd6d-ca17-4dce-854e-18123dd2efa0",
      "name": "Gen voiceover text"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a62561bb-43d6-49eb-b2b4-46d63f310ff3",
              "name": "text_to_tts",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "7885f8e6-a366-4512-89c7-adcf4f7fe4e2",
              "name": "subfix",
              "value": "={{$now.toMillis()}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -320,
        336
      ],
      "id": "35cec5b7-b856-4ad7-bff4-d17956de4efa",
      "name": "Input text to test"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [\n    {\n      \"role\": \"user\",\n      \"parts\": [\n        {\n          \"text\": \"{{ $json.text_to_tts }}\"\n        }\n      ]\n    }\n  ],\n  \"generationConfig\": {\n    \"responseModalities\": [\"audio\"],\n    \"temperature\": 1,\n    \"speech_config\": {\n      \"voice_config\": {\n        \"prebuilt_voice_config\": {\n          \"voice_name\": \"{{ $('Form Trigger').item.json.Model }}\"\n        }\n      }\n    }\n  }\n}\n",
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -112,
        336
      ],
      "id": "d7ed1e4f-d590-4dc5-a283-9de8a9c4824d",
      "name": "Text to speech",
      "credentials": {
        "googlePalmApi": {
          "id": "MGPUBeaqa6p2FGHv",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Configurable params\nconst sampleRate = 24000; // Hz\nconst numChannels = 1; // Mono\nconst bitsPerSample = 16;\nconst rawData = $input.first().json.candidates[0].content.parts[0].inlineData.data// Base64\n// Decode base64 to buffer\nconst rawBuffer = Buffer.from(rawData, 'base64');\nconst byteRate = sampleRate * numChannels * bitsPerSample / 8;\nconst blockAlign = numChannels * bitsPerSample / 8;\nconst wavHeaderSize = 44;\nconst dataSize = rawBuffer.length;\nconst fileSize = wavHeaderSize + dataSize - 8;\nconst header = Buffer.alloc(wavHeaderSize);\n// 'RIFF'\nheader.write('RIFF', 0);\n// ChunkSize\nheader.writeUInt32LE(fileSize, 4);\n// 'WAVE'\nheader.write('WAVE', 8);\n// 'fmt '\nheader.write('fmt ', 12);\n// Subchunk1Size (PCM = 16)\nheader.writeUInt32LE(16, 16);\n// AudioFormat (PCM = 1)\nheader.writeUInt16LE(1, 20);\n// NumChannels\nheader.writeUInt16LE(numChannels, 22);\n// SampleRate\nheader.writeUInt32LE(sampleRate, 24);\n// ByteRate\nheader.writeUInt32LE(byteRate, 28);\n// BlockAlign\nheader.writeUInt16LE(blockAlign, 32);\n// BitsPerSample\nheader.writeUInt16LE(bitsPerSample, 34);\n// 'data'\nheader.write('data', 36);\n// Subchunk2Size\nheader.writeUInt32LE(dataSize, 40);\n// Combine header + raw data\nconst wavBuffer = Buffer.concat([header, rawBuffer]);\nreturn [\n{\nbinary: {\nwav: {\ndata: wavBuffer.toString('base64'),\nmimeType: 'audio/mpeg',\nfileName: 'voiceover_original.mp3'\n}\n}\n}\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        352
      ],
      "id": "dc202ab4-7685-4931-b721-037fbf179503",
      "name": "Get voiceover mp3"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "/tmp/video_batch_temp/voiceover_original.mp3",
        "dataPropertyName": "wav",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        512,
        368
      ],
      "id": "bebb919a-5bf6-4798-822f-557387176c60",
      "name": "Save Voiceover Locally"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1904,
        736
      ],
      "id": "171998d6-3c55-4199-b71b-5f7526888a68",
      "name": "Merge2"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items from the Basic LLM Chain\nconst inputItems = $items();\nconst cleanedItems = [];\n\n// Function to clean text from problematic characters\nfunction cleanPromptText(text) {\n  if (!text || typeof text !== 'string') {\n    return text;\n  }\n  \n  return text\n    // Remove quotes (both single and double)\n    .replace(/[\"\"\"''']/g, '')\n    // Remove parentheses\n    .replace(/[()]/g, '')\n    // Remove square brackets\n    .replace(/[\\[\\]]/g, '')\n    // Remove curly braces\n    .replace(/[{}]/g, '')\n    // Remove backslashes\n    .replace(/\\\\/g, '')\n    // Remove forward slashes that might be problematic\n    .replace(/\\/(?![a-zA-Z])/g, '')\n    // Clean up multiple spaces created by removals\n    .replace(/\\s+/g, ' ')\n    // Trim whitespace from start and end\n    .trim();\n}\n\n// Process each item\nfor (const item of inputItems) {\n  // Create a deep copy of the item to avoid modifying the original\n  const cleanedItem = JSON.parse(JSON.stringify(item));\n  \n  // Clean the text field if it exists\n  if (cleanedItem.json && cleanedItem.json.text) {\n    cleanedItem.json.text = cleanPromptText(cleanedItem.json.text);\n  }\n  \n  // If the item has other text fields, clean them too\n  Object.keys(cleanedItem.json || {}).forEach(key => {\n    if (typeof cleanedItem.json[key] === 'string' && key.toLowerCase().includes('text')) {\n      cleanedItem.json[key] = cleanPromptText(cleanedItem.json[key]);\n    }\n  });\n  \n  cleanedItems.push(cleanedItem);\n}\n\n// Log the cleaning results for debugging\nconsole.log(`Processed ${inputItems.length} items`);\nconsole.log('Sample before:', inputItems[0]?.json?.text?.substring(0, 100) + '...');\nconsole.log('Sample after:', cleanedItems[0]?.json?.text?.substring(0, 100) + '...');\n\nreturn cleanedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        0
      ],
      "id": "35dc7880-e6c1-41a5-ad36-cb7b83ce0ab6",
      "name": "Clean prompts"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "field": "content"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1.1,
      "position": [
        -1328,
        288
      ],
      "id": "3f709152-42d3-4eaa-84b1-7044c5966edf",
      "name": "Summarize"
    },
    {
      "parameters": {
        "command": "=mkdir -p /tmp/video_batch_temp || true"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -1120,
        288
      ],
      "id": "cad264e6-119e-45d8-a389-e4b385286e65",
      "name": "Execute Command"
    },
    {
      "parameters": {
        "command": "=ffmpeg -y -i /tmp/video_batch_temp/voiceover_original.mp3 -filter:a \"atempo=1.2\" /tmp/video_batch_temp/voiceover.mp3"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        720,
        368
      ],
      "id": "cd489bac-75ca-4b3c-8658-d94b3375d08d",
      "name": "Execute Command1"
    },
    {
      "parameters": {
        "text": "={{\n  `Hello!\\n\\nYour generated video with music is ready!\\n\\n` +\n  `üé¨ <b>YouTube:</b> <a href=\"${$json.youtubeUrl}\">Watch on YouTube</a>\\n` +\n  `üìÅ <b>Direct Download:</b> <a href=\"${$json.finalVideoUrl}\">Download Video</a>\\n\\n` +\n  `Video Details:\\n` +\n  `‚Ä¢ Duration: ${$json.videoDuration} seconds\\n` +\n  `‚Ä¢ With background music: ‚úÖ\\n` +\n  `‚Ä¢ Uploaded to YouTube: ‚úÖ\\n\\n` +\n  `Enjoy your video!\\n\\n` +\n  `Best regards,\\n` +\n  `Algoran Team`\n}}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "2839682e-26ca-4d6d-b854-f821d5b1f9c3",
      "name": "Send Success Message to Telegram",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1600,
        1424
      ],
      "webhookId": "5ecb45a5-c410-4ff2-a483-4d4006ccbb15",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "XdYWbfPLQBrIlGkm",
          "name": "Telegram algoran_bot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Debug: Check what we're receiving\nconst receivedItems = $items();\nconsole.log('DEBUG: Total items received:', receivedItems.length);\nconsole.log('DEBUG: First item structure:', JSON.stringify(receivedItems[0], null, 2));\n\n// Get the original event_id - try multiple sources\nconst currentItem = receivedItems[0];\nlet originalEventId;\n\n// Try to get event_id from current item first (for loop-back scenarios)\nif (currentItem.json.event_id) {\n  originalEventId = currentItem.json.event_id;\n} else {\n  // Try to get from the correct node name for this workflow\n  try {\n    originalEventId = $('WAN 2.1 - Fixed Format').item.json.event_id;\n  } catch (error) {\n    // If node reference fails, look for event_id in any of the received items\n    console.log('Node reference failed, searching in received data...');\n    for (const item of receivedItems) {\n      if (item.json.event_id) {\n        originalEventId = item.json.event_id;\n        break;\n      }\n    }\n    // If still not found, generate a placeholder or use null\n    if (!originalEventId) {\n      console.error('Could not find event_id anywhere!');\n      originalEventId = null;\n    }\n  }\n}\n\nconsole.log('DEBUG: Original event_id:', originalEventId);\n\n// This code runs ONCE for ALL items.\nconst allItems = $items();\nconst successfulResults = [];\nlet completedCount = 0;\n\n// Loop through every item we received.\nfor (const item of allItems) {\n  const rawData = item.json.data;\n  \n  // Check if this item contains 'event: complete'\n  const isComplete = rawData && rawData.includes('event: complete');\n  \n  if (isComplete) {\n    completedCount++;\n    \n    // Extract the JSON part that comes after the last \"data: \" prefix.\n    const dataPrefix = 'data: ';\n    const dataStartIndex = rawData.lastIndexOf(dataPrefix);\n    \n    if (dataStartIndex !== -1) {\n      const jsonString = rawData.substring(dataStartIndex + dataPrefix.length).trim();\n      \n      if (jsonString) {\n        // Parse the text into a JSON object.\n        let parsedData;\n        try {\n          parsedData = JSON.parse(jsonString);\n          \n          // Navigate the structure to find the video URL.\n          const videoUrl = parsedData[0]?.video?.url;\n          \n          // If we found a URL, add a new, clean object to our results list.\n          if (videoUrl) {\n            successfulResults.push({\n              json: {\n                downloadUrl: videoUrl,\n                status: 'complete',\n                isComplete: true,\n                event_id: originalEventId\n              }\n            });\n          } else {\n            // Complete but no URL found\n            successfulResults.push({\n              json: {\n                status: 'complete',\n                isComplete: true,\n                downloadUrl: null,\n                error: 'No URL found in complete response',\n                event_id: originalEventId\n              }\n            });\n          }\n        } catch (error) {\n          console.error('Failed to parse JSON for item:', item, error);\n          // Still count as complete even if URL parsing fails\n          successfulResults.push({\n            json: {\n              status: 'complete',\n              isComplete: true,\n              downloadUrl: null,\n              error: 'Failed to parse URL: ' + error.message,\n              event_id: originalEventId\n            }\n          });\n        }\n      } else {\n        // Complete but no JSON data\n        successfulResults.push({\n          json: {\n            status: 'complete',\n            isComplete: true,\n            downloadUrl: null,\n            error: 'No JSON data found',\n            event_id: originalEventId\n          }\n        });\n      }\n    } else {\n      // Complete but no data prefix found\n      successfulResults.push({\n        json: {\n          status: 'complete',\n          isComplete: true,\n          downloadUrl: null,\n          error: 'No data prefix found',\n          event_id: originalEventId\n        }\n      });\n    }\n  } else {\n    // Item is not complete yet\n    successfulResults.push({\n      json: {\n        status: 'processing',\n        isComplete: false,\n        downloadUrl: null,\n        event_id: originalEventId\n      }\n    });\n  }\n}\n\nconsole.log('DEBUG: Completed count:', completedCount);\nconsole.log('DEBUG: Total results:', successfulResults.length);\nconsole.log('DEBUG: Event ID being passed:', originalEventId);\n\n// Calculate total expected based on the total items we received\nconst totalExpected = allItems.length;\nconst allComplete = completedCount === totalExpected;\n\n// Add summary info to the first result if we have any results\nif (successfulResults.length > 0) {\n  successfulResults[0].json.summary = {\n    totalExpected: totalExpected,\n    completedCount: completedCount,\n    allComplete: allComplete,\n    processingCount: successfulResults.length - completedCount\n  };\n}\n\n// Return the final list with status information\nreturn successfulResults;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1504,
        144
      ],
      "id": "e51c53ce-c860-4a88-9f98-2d42b52ed45c",
      "name": "Parse Video URLs"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "complete",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "c56558f3-8483-4752-b2a5-c9edd95c4575"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a3b150af-3331-4d96-af7d-d6c1abdeeb9f",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "processing",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "785eda02-0708-4779-8144-b6b7e374a723",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "failed",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1264,
        560
      ],
      "id": "9c956507-41e9-44cc-b69d-a29ab38d91cd",
      "name": "Switch"
    },
    {
      "parameters": {
        "chatId": "111889747",
        "text": "={{\n  `Hello!\\n\\nSorry, Your video genration failed!\\n\\n` +\n  `Best regards,\\n` +\n  `Algoran Team`\n}}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "68c32c34-13a9-4862-b385-bed89e4dcbe8",
      "name": "Send Success Message to Telegram2",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1568,
        704
      ],
      "webhookId": "bb07f536-f3aa-45f9-9700-5702fb53b6b3",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "XdYWbfPLQBrIlGkm",
          "name": "Telegram algoran_bot"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Form Trigger": {
      "main": [
        [
          {
            "node": "Upload Music to Cloudinary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape with Jina AI": {
      "main": [
        [
          {
            "node": "Extract Data from Jina",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Data from Jina": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Images": {
      "main": [
        [
          {
            "node": "Get Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Images": {
      "main": [
        [
          {
            "node": "Get Image info",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Binary with data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Download Generated Video": {
      "main": [
        [
          {
            "node": "Merge tmp video",
            "type": "main",
            "index": 1
          },
          {
            "node": "Prepare Merge Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Temp Directory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Processing": {
      "main": [
        [
          {
            "node": "Get Video Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Video Result": {
      "main": [
        [
          {
            "node": "Parse Video URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WAN 2.1 - Fixed Format": {
      "main": [
        [
          {
            "node": "Wait for Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload images to Cloudinary": {
      "main": [
        [
          {
            "node": "Prepare Video Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Video Data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Split Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "WAN 2.1 - Fixed Format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze image": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          },
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Clean prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Merge Data": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Video Locally": {
      "main": [
        [
          {
            "node": "Create Transition Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Transition Command": {
      "main": [
        [
          {
            "node": "Download Music from Cloudinary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Videos with Transitions": {
      "main": [
        [
          {
            "node": "Read Final Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Final Video": {
      "main": [
        [
          {
            "node": "Upload Final Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Final Video": {
      "main": [
        [
          {
            "node": "Generate Title & Description",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cleanup Temp Files": {
      "main": [
        [
          {
            "node": "Prepare Final Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Final Output": {
      "main": [
        [
          {
            "node": "Send Success Message to Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge tmp video": {
      "main": [
        [
          {
            "node": "Save Video Locally",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Temp Directory": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Merge tmp video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Merge Videos with Transitions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Music from Cloudinary": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Upload Music to Cloudinary": {
      "main": [
        [
          {
            "node": "Scrape with Jina AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI GPT-4o Mini": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Title & Description",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate Title & Description": {
      "main": [
        [
          {
            "node": "Prepare Upload Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Upload Data": {
      "main": [
        [
          {
            "node": "Get final video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get final video": {
      "main": [
        [
          {
            "node": "Upload to YouTube",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to YouTube": {
      "main": [
        [
          {
            "node": "Cleanup Temp Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Image info": {
      "main": [
        [
          {
            "node": "Set crop dimensions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set crop dimensions": {
      "main": [
        [
          {
            "node": "Merge Binary with data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crop images": {
      "main": [
        [
          {
            "node": "Analyze image",
            "type": "main",
            "index": 0
          },
          {
            "node": "Upload images to Cloudinary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Binary with data": {
      "main": [
        [
          {
            "node": "Crop images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Gen voiceover text",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Gen voiceover text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gen voiceover text": {
      "main": [
        [
          {
            "node": "Input text to test",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input text to test": {
      "main": [
        [
          {
            "node": "Text to speech",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text to speech": {
      "main": [
        [
          {
            "node": "Get voiceover mp3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get voiceover mp3": {
      "main": [
        [
          {
            "node": "Save Voiceover Locally",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Voiceover Locally": {
      "main": [
        [
          {
            "node": "Execute Command1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean prompts": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command1": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Video URLs": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Download Generated Video",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait for Processing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Success Message to Telegram2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "36c18c9a-980f-4d37-93bc-09b6e298a205",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e98bac781f8d0bc260488918ad5cf6962996205c970beb00afd2786f332d7929"
  },
  "id": "y06qu7YZJjaog7pp",
  "tags": [
    {
      "createdAt": "2025-07-21T12:34:39.388Z",
      "updatedAt": "2025-07-21T12:34:39.388Z",
      "id": "HUjAl8fCNnsn9bXq",
      "name": "HF"
    },
    {
      "createdAt": "2025-04-20T15:53:20.219Z",
      "updatedAt": "2025-04-20T15:53:20.219Z",
      "id": "SaJOLfKo11pN3wjK",
      "name": "idea2video"
    },
    {
      "createdAt": "2025-04-20T15:53:20.196Z",
      "updatedAt": "2025-04-20T15:53:20.196Z",
      "id": "j8HqAnvgxIriQUmj",
      "name": "content automation"
    }
  ]
}